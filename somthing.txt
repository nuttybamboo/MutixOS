instructional OS: OS/161, Nachos, GeekOS, ics-os, Pintos, PIOS(distributed OS).

An instructional OS should be realistic enough to show how real operating systems work, yes simple enouth that the students can understand and modify it in significant ways.      -form The Nachos Instructional Operating System

Earlier OS were too complicated for an undergraduate to understand and modify in a semester.
UNIX showed that operating systems need only a few simple but powerful interfaces, and that the core of an operating system can be written in only a few dozen pages.                      -form The Nachos Instructional Operating System

Rather than having to run the operating system on the bare hardware, computing cycles became cheap enough to make it feasible to execute an operating system kernel using a simulation of real hardware.

Our system, called Nachos, makes it possible to give assignments that require students to write significant portions of each of the major pieces of a modern operating system: thread management, file systems, multiprogramming, virtual memory, and networking. 
We use these assignments to illustrate concepts that we believe are necessary to understand the computer systems of today and of the future: concurrency and synchronization, caching and locality, the trade-off between simplicity and performance, building reliability from unreliable components, dynamic scheduling, the power of a level of translation, distributed computing, layering, and virtualization.

to build the simplest implementation we could think of for each sub-system of Nachos

Nachos maintains a simulated time that is incremented whenever a user program executes an instruction and whenever a call is made to certain low-level operating system routines. Interrupt handlers are then invoked when the simulated time reaches the appropriate point.
thus the interrupt would not heppened bettween a instruction or a os call...

provided the initial seed to the random number generator is the same, however, the behavior of the system is repeatable.

To simplify matters, we omitted certain aspects of the C++ language: derived classes, operator and function overloading, and C++ streams.

thread management and synchronization, the le system, user-level multiprogramming support, the virtual memory system, and network support. Each assignment is designed to build upon previous ones for instance, every part of Nachos uses thread primitives for managing concurrency. 
thus, I can implement the entire system according to this order...

For simplicity, thread scheduling is normally non-preemptive, but to emphasize the importance of critical sections, we have a command-line option that causes threads to be time-sliced at "random", but repeatable, points in the program.
Well, I'm still considering for the thred scheduling algorithm... 

there is no synchronization (only one thread can access the file system at a time), files have a very small maximum size, files have a xed size once created, there is no caching or buffering of le data, the le name space is completely at (there is no hierarchical directory structure), and there is no attempt at providing robustness across machine and disk crashes.

One important topic we chose to leave out (again, as a tradeoff against time constraints) is the trend toward a small-kernel operating system structure, where pieces of the operating system are split off into user-level servers. Because of its modular design, it would be straightforward to move Nachos towards a small-kernel structure, except that  we have no symbolic debugging support for user programs and we would need a stub compiler to make it easy to make procedure calls across address spaces.

The assignment has three parts. First, students implement the mechanism for page fault handling - their code must catch the page fault, find the needed page on disk, find a page frame in memory to hold the needed page (writing the old contents of the page frame to disk if it is dirty), read the new page from disk into memory, adjust the page table entry, and then resume the execution of the program. 
The second part of the assignment is to devise a policy for managing the memory as a cache - for deciding which page to toss out when a new page frame is needed, in what circumstances (if any) to do read-ahead, whether or not to write unused, dirty pages back to disk in advance to speed later page fault handling, and how many pages to bring in before initially starting to run a program.
well, this will contribute to my implement.... 


in PintOS:
Places students in the perspective of OS designer, rather than OS user
Teaches how an OS works from the inside, specifically, the kernel
Maximize Creative Freedom
Provide structured questionnaires that students use to describe and justify their design rationale
Work In Teams


in GeekOS:

The first motivation was the desire to create a template for booting a program on a bare x86 PC
Nachos:The main advantage of this approach is that the operating system may be debugged using the host system’s debugger, and a crash of the operating system only affects a single user process.
 Finally, the operating system is insulated from low-level hardware details; it may treat the system call interface of the host operating system as its ‘hardware’.
The main reason, which is partly aesthetic, is that Nachos destroys one of the elegant properties that, in my opinion, makes operating systems so fascinating.In Nachos, it does not, a fact which may cause real confusion when students try to understand how a real operating system separates the kernel from user processes.
Another (lesser) objection is that Nachos abstracts away chip and device level programming; this could be seen as an advantage, but I believe that operating systems are a nice way to introduce students to the low-level organization of real hardware.

Minix:As such, it comprises many tens of thousands of lines of source code. While well written and exten-sively documented, it is nonetheless large and complex. 
First, it is somewhat intimidating to dive into such a large source base. Second, Minix already implements all important OS features, making it somewhat difficult to design significant student projects. 

nachos 1993

in OS/161:

They seem to have a working lifetime of around ten years and then become dated, due both to changes in the OS community and to changing expectations and prior knowledge bases of students.
(1) provide a realistic execution environment; 
(2) facilitate debugging; 
(3) retain the simplicity and assignment-oriented structure necessary for course use; 
(4) help to familiarize students with the structure and layout of real OSes;
(5) have the completed OS at the end of the course be capable of running real, if small-scale, user applications; 
(6) provide a cleanly written and robust code base.
For teaching, a certain amount of realism is desirable.Too much realism, however, becomes both too complicated and, sometimes, realistically painful.
Another new teaching OS is Topsy [2], which runs natively on MIPS simulators such as SimOS. However, it includes no native support for either paged virtual memory or file system operations; it does not appear to be intended to illustrate the design and implementation of a complete system but rather to offer a platform for teaching concurrency and hardware manipulation.
Other past instructional OSes that appear to be more or less obsolete include Xinu, from Purdue circa 1984, and TOY, developed in 1973.


[Holt 1983] Holt, R. Concurrent Euclid, the UNIX System, and TUNIS. Addison-Wesley, 1983.

Nachos [1] Christopher, W. A., Procter, S. J., and Anderson, T. E. The nachos instructional operating system. In USENIX Winter (1993), pp. 481–488.
Minix [5] Tanenbaum, A. S., and Woodhull, A. S. Operating Systems: Design and Implementation, second ed. Prentice-Hall, Englewood Cliffs, NJ 07632, USA, 1997. Includes CD-ROM.
Bochs [3] Lawton, K. bochs: The open source ia-32 emulation project (home page), 2001. Online. Internet. Available WWW: http://bochs.sourceforge.net/.
Topsy [2] Fankhauser, G., Conrad, C., Zitzler, E., and Plattner, B. Topsy - a teachable operating system, 2000. Online. Internet. September 7, 2001. Available WWW: http://www.tik.ee.ethz.ch/~topsy/Book/Topsy\_1.1.pdf.

GeekOS David Hovemeyer. GeekOS: An Instructional Operating System for Real Hardware ,2001. Online. Internet. December 10, 2001. Available WWW: http://geekos.sourceforge.net/docs/geekos-paper.pdf.

[Mealy et al. 1966] Mealy, G., Witt, B., and Clark, W. The Functional Structure of OS/360. IBM Systems Journal, 5(1):3-51, January 1966.
[Daley & Dennis 1968] Daley, R. and Dennis, J. Virtual Memory, Processes and Sharing in MULTICS. Communications of the ACM, 11(5):306-312, May 1968.
[Kane 1987] Kane, G. MIPS R2000 RISC Architecture. Prentice Hall, 1987.
[Tanenbaum 1987] Tanenbaum, A. Operating Systems: Design and Implementation. Prentice-Hall, 1987.
